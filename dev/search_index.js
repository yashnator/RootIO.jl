var documenterSearchIndex = {"docs":
[{"location":"gettingstarted/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The RootIO module provides functionality for working with ROOT TTrees in Julia. It allows you to create, manage, and write TTrees to ROOT files, using a Julia-friendly API. This guide will walk you through the basic usage of RootIO.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Before getting started, ensure you have the required dependencies installed. You'll need the following Julia packages:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"ROOT\")\nPkg.add(\"Tables\")\nPkg.add(\"CxxWrap\")","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"To install the latest version of RootIO.jl use the Julia's package manager by pressing the ] in the REPL prompt:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> ]\n(v1.6) pkg> add RootIO","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"compat: Use Julia 1.6 or newer\nRootIO.jl requires at least Julia v1.6 as it is dependent on ROOT.jl. Older versions of Julia are not supported.","category":"page"},{"location":"gettingstarted/#Basic-Methods-in-RootIO","page":"Getting Started","title":"Basic Methods in RootIO","text":"","category":"section"},{"location":"gettingstarted/#TTree(file::CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile},-name::String,-title::String,-data)","page":"Getting Started","title":"TTree(file::CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile}, name::String, title::String, data)","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Creates a new RootIO TTree struct that is in abstraction over the ROOT TTree, with branches of a given type or branches having types inferred from the provided row instance.","category":"page"},{"location":"gettingstarted/#Example:","page":"Getting Started","title":"Example:","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"mutable struct Event\n    x::Float32\n    y::Float32\n    z::Float32\n    v::CxxWrap.StdVector{Float32}\nend\nf = ROOT.TFile!Open(\"data.root\", \"RECREATE\")\n# Create a RootIO ttree with columns x, y, z and v\ntree = RootIO.TTree(f, \"mytree\", \"mytitle\", Event)","category":"page"},{"location":"gettingstarted/#Fill(tree::TTree,-data)","page":"Getting Started","title":"Fill(tree::TTree, data)","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Adds a row the the RootIO TTree with the given data.","category":"page"},{"location":"gettingstarted/#Example:-2","page":"Getting Started","title":"Example:","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"# Fille the TTree from previous example with an event e\ne.x, e.y, e.z = rand(3)\nresize!.([e.v], 5)\ne.v .= rand(Float32, 5)\nRootIO.Fill(tree, e)","category":"page"},{"location":"gettingstarted/#Write(tree::TTree)","page":"Getting Started","title":"Write(tree::TTree)","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Writes a ROOT TTree to the associated ROOT file. Call this method after filling the entries to the TTree.","category":"page"},{"location":"gettingstarted/#Example:-3","page":"Getting Started","title":"Example:","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"RootIO.Write(tree)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"warning: Always close the ROOT file after your work is completed\nClose the ROOT file, 'f', with the help of ROOT.Close(f) after the analysis is completed","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"#RootIO.jl","page":"RootIO.jl","title":"RootIO.jl","text":"","category":"section"},{"location":"#Introduction","page":"RootIO.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"RootIO.jl","title":"RootIO.jl","text":"Interface to ROOT file format with read/write support based on the C++ ROOT libraries.","category":"page"},{"location":"","page":"RootIO.jl","title":"RootIO.jl","text":"It uses a Julia interface to the official ROOT C++ libraries written using WrapIt and CxxWrap. It extends this interface to provide a user-friendly and Julia-like interface.","category":"page"},{"location":"","page":"RootIO.jl","title":"RootIO.jl","text":"This project is initiated in the context of the 2024 edition of the Google Summer of Code program under the CERN-HSF organization.","category":"page"},{"location":"#Contents","page":"RootIO.jl","title":"Contents","text":"","category":"section"},{"location":"","page":"RootIO.jl","title":"RootIO.jl","text":"Pages = [\"index.md\", \"gettingstarted.md\", \"typesandmethods.md\", \"examples.md\"]\nDepth = 1","category":"page"},{"location":"#For-contributors","page":"RootIO.jl","title":"For contributors","text":"","category":"section"},{"location":"","page":"RootIO.jl","title":"RootIO.jl","text":"Add support for ROOT classes in ROOT.jl\nAdd support for writing new classes and objects\nTranslate ROOT Tutorials into equivalent Julia tutorials","category":"page"},{"location":"typesandmethods/#Types-and-Methods","page":"Types & Methods","title":"Types & Methods","text":"","category":"section"},{"location":"typesandmethods/","page":"Types & Methods","title":"Types & Methods","text":"Modules = [RootIO]\nOrder   = [:type, :function]","category":"page"},{"location":"typesandmethods/#RootIO.TTree","page":"Types & Methods","title":"RootIO.TTree","text":"struct TTree\n\nA struct representing a ROOT TTree with its associated branches and file.\n\n\n\n\n\n","category":"type"},{"location":"typesandmethods/#RootIO.TTree-Tuple{CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile}, String, String, Any}","page":"Types & Methods","title":"RootIO.TTree","text":"TTree(file::CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile}, name::String, title::String, data)\n\nCreates a new ROOT TTree with branches of given type or branches having types infered from the given data (data is not written to the tree).\n\nArguments\n\nfile: A pointer to a ROOT file where the TTree will be stored.\nname: The name of the TTree.\ntitle: The title of the TTree.\ndata: The data used to define and optionally fill the branches of the TTree. This can be a DataType or an instance of a type with fields.\n\nExample\n\nmutable struct Event\n    x::Float32\n    y::Float32\n    z::Float32\n    v::StdVector{Float32}\nend\nf = ROOT.TFile!Open(\"data.root\", \"RECREATE\")\nEvent()  = Event(0., 0., 0., StdVector{Float32}())\ntree = RootIO.TTree(f, \"mytree\", \"mytreetitle\", Event)\ne = Event()\nfor i in 1:10\n    e.x, e.y, e.z = rand(3)\n    resize!.([e.v], 5)\n    e.v .= rand(Float32, 5)\n    RootIO.Fill(tree, e)\nend\n\n\n\n\n\n","category":"method"},{"location":"typesandmethods/#RootIO.TTree-Tuple{CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile}, String, String}","page":"Types & Methods","title":"RootIO.TTree","text":"TTree(file:CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile}, name::String, title::String; kwargs...)\n\nCreates a new ROOT TTree and fills it with the provided data.\n\nArguments\n\nfile: A pointer to a ROOT file where the TTree will be stored.\nname: The name of the TTree.\ntitle: The title of the TTree.\nkwargs...: Named arguments representing the branches of the TTree. Each named argument is either a data type or an array of data.\n\nExample\n\nfile = ROOT.TFile!Open(\"example.root\", \"RECREATE\")\nname = \"example_tree\"\ntitle = \"Example TTree\"\ndata = (col_float=rand(Float64, 3), col_int=rand(Int32, 3))\ntree = RootIO.TTree(file, name, title; data...)\n\n\n\n\n\n","category":"method"},{"location":"typesandmethods/#RootIO.Fill-Tuple{RootIO.TTree, Any}","page":"Types & Methods","title":"RootIO.Fill","text":"Fill(tree::TTree, data)\n\nFills a ROOT TTree with the provided data.\n\nArguments\n\ntree: The TTree object to be filled.\ndata: The data to fill the TTree with. This can be a table or a row.\n\nExample\n\n# Assuming `tree` is an existing TTree and `data` is a table or row\nFill(tree, data)\n\n\n\n\n\n","category":"method"},{"location":"typesandmethods/#RootIO.Write-Tuple{RootIO.TTree}","page":"Types & Methods","title":"RootIO.Write","text":"Write(tree::TTree)\n\nWrites a ROOT TTree to the associated ROOT file.\n\nArguments\n\ntree::TTree: The TTree object to be written to the ROOT file.\n\n\n\n\n\n","category":"method"}]
}
