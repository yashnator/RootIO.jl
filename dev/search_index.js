var documenterSearchIndex = {"docs":
[{"location":"gettingstarted/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The RootIO module provides functionality for working with ROOT TTrees in Julia. It allows you to create, manage, and write TTrees to ROOT files, using a Julia-friendly API. This guide will walk you through the basic usage of RootIO.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Before getting started, ensure you have the required dependencies installed. You'll need the following Julia packages:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"ROOT\")\nPkg.add(\"Tables\")\nPkg.add(\"CxxWrap\")","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"To install the latest version of RootIO.jl use the Julia's package manager by pressing the ] in the REPL prompt:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"julia> ]\n(v1.6) pkg> add RootIO","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"compat: Use Julia 1.6 or newer\nRootIO.jl requires at least Julia v1.6 as it is dependent on ROOT.jl. Older versions of Julia are not supported.","category":"page"},{"location":"gettingstarted/#Basic-Methods-in-RootIO","page":"Getting Started","title":"Basic Methods in RootIO","text":"","category":"section"},{"location":"gettingstarted/#TTree(file::CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile},-name::String,-title::String,-data)","page":"Getting Started","title":"TTree(file::CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile}, name::String, title::String, data)","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Creates a new RootIO TTree struct that is in abstraction over the ROOT TTree, with branches of a given type or branches having types inferred from the provided row instance.","category":"page"},{"location":"gettingstarted/#Example:","page":"Getting Started","title":"Example:","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"mutable struct Event\n    x::Float32\n    y::Float32\n    z::Float32\n    v::CxxWrap.StdVector{Float32}\nend\nf = ROOT.TFile!Open(\"data.root\", \"RECREATE\")\n# Create a RootIO ttree with columns x, y, z and v\ntree = RootIO.TTree(f, \"mytree\", \"mytitle\", Event)","category":"page"},{"location":"gettingstarted/#Fill(tree::TTree,-data)","page":"Getting Started","title":"Fill(tree::TTree, data)","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Adds a row the the RootIO TTree with the given data.","category":"page"},{"location":"gettingstarted/#Example:-2","page":"Getting Started","title":"Example:","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"# Fille the TTree from previous example with an event e\ne.x, e.y, e.z = rand(3)\nresize!.([e.v], 5)\ne.v .= rand(Float32, 5)\nRootIO.Fill(tree, e)","category":"page"},{"location":"gettingstarted/#Write(tree::TTree)","page":"Getting Started","title":"Write(tree::TTree)","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Writes a ROOT TTree to the associated ROOT file. Call this method after filling the entries to the TTree.","category":"page"},{"location":"gettingstarted/#Example:-3","page":"Getting Started","title":"Example:","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"RootIO.Write(tree)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"warning: Always close the ROOT file after your work is completed\nClose the ROOT file, 'f', with the help of ROOT.Close(f) after the analysis is completed","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Writing-primitive-types","page":"Examples","title":"Writing primitive types","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"All the primitive types and structs can be written to the TTree using the RootIO.jl library. By convention, a data type or an instance of the column can be used to create the columns. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"A complete list of supported Julia and ROOT custom types can be found in the introduction page.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"tip: Creating TTree with columns instances\nCreating a TTree with row instance only infers the types from the instance, and doesn't write it to the TTree","category":"page"},{"location":"examples/#Writing-to-a-TTree-using-keyword-argument-and-instance-of-row","page":"Examples","title":"Writing to a TTree using keyword-argument and instance of row","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Keyword-arguments can be used to pass instance of a column to the tree. The types and names are inferred from the arguments.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"import RootIO, ROOT\nusing DataFrames\nfile = ROOT.TFile!Open(\"example.root\", \"RECREATE\")\nname = \"example_tree\"\ntitle = \"Example TTree\"\ndata = (col_float=rand(Float64, 3), col_int=rand(Int32, 3))\ntree = RootIO.TTree(file, name, title; data...)\nRootIO.Write(tree)\nROOT.Close(file)","category":"page"},{"location":"examples/#Writing-a-struct-to-a-TTree","page":"Examples","title":"Writing a struct to a TTree","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The fieldnames and field types of the struct are used to create the branches of the TTree.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"import RootIO, ROOT\nusing CxxWrap\nmutable struct Event\n    x::Float32\n    y::Float32\n    z::Float32\n    v::StdVector{Float32}\nend\nf = ROOT.TFile!Open(\"data.root\", \"RECREATE\")\nEvent()  = Event(0., 0., 0., StdVector{Float32}())\ntree = RootIO.TTree(f, \"mytree\", \"mytreetitle\", Event)\ne = Event()\nfor i in 1:10\n    e.x, e.y, e.z = rand(3)\n    resize!.([e.v], 5)\n    e.v .= rand(Float32, 5)\n    RootIO.Fill(tree, e)\nend\nRootIO.Write(tree)\nROOT.Close(f)","category":"page"},{"location":"examples/#Writing-vectors","page":"Examples","title":"Writing vectors","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"RootIO.jl supports writing of the CxxWrap.StdVector that wraps the std::vector from C/C++.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"import RootIO, ROOT, CxxWrap\n# Create and open the ROOT file\nfile = ROOT.TFile!Open(\"example.root\", \"RECREATE\")\nname = \"example_tree\"\ntitle = \"Example TTree\"\nv = StdVector{Float32}()\n# Create a columns for CxxWrap.StdVector data type\ntree = RootIO.TTree(file, name, title; my_arr = CxxWrap.StdVector)\n# Write the CxxWrap.Std vector to the TTree\nv .= rand(Float32, 5)\nRootIO.Fill(tree, [v])\nRootIO.Write(tree)\nROOT.Close(file)","category":"page"},{"location":"examples/#C-style-arrays","page":"Examples","title":"C-style arrays","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The syntax for creating a C-style array is array_name = (element_type, array_size), where:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"array_name is the name of column containing the array\nelement_type is a data type or an instance of array element\narray_size is the symbol for variable having size of the array for fixed size array, or identifier of the branch that contains the length of the array in case of variable length array ","category":"page"},{"location":"examples/#Fixed-size-C-style-arrays","page":"Examples","title":"Fixed size C-style arrays","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"import RootIO, ROOT\n# Create and open the ROOT file\nfile = ROOT.TFile!Open(\"example.root\", \"RECREATE\")\nname = \"example_tree\"\ntitle = \"Example TTree\"\n# Store the size of array as variable\nmy_arr_fixed_length = 3\n# Create the column for C-style array\ntree = RootIO.TTree(file, name, title; my_arr = (Int64, my_arr_fixed_length))\n# Write the C-style array to the TTree\nRootIO.Fill(tree, [[1,2,3]])\nRootIO.Write(tree)\nROOT.Close(file)","category":"page"},{"location":"examples/#Variable-size-C-style-arrays","page":"Examples","title":"Variable size C-style arrays","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"import RootIO, ROOT\n# Create and open the the ROOT file\nfile = ROOT.TFile!Open(\"example.root\", \"RECREATE\")\nname = \"example_tree\"\ntitle = \"Example TTree\"\n# Create the column for array-size and the C-style array\ntree = RootIO.TTree(file, name, title; arr_size = Int64, my_arr = (Int64, :arr_size))\n# Write the C-style array along with its size to the TTree\nRootIO.Fill(tree, [3, [1,10,100]])\nRootIO.Fill(tree, [2, [2,20]])\nRootIO.Write(tree)\nROOT.Close(file)","category":"page"},{"location":"#RootIO.jl","page":"RootIO.jl","title":"RootIO.jl","text":"","category":"section"},{"location":"#Introduction","page":"RootIO.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"RootIO.jl","title":"RootIO.jl","text":"Interface to ROOT file format with read/write support based on the C++ ROOT libraries.","category":"page"},{"location":"","page":"RootIO.jl","title":"RootIO.jl","text":"It uses a Julia interface to the official ROOT C++ libraries written using WrapIt and CxxWrap. It extends this interface to provide a user-friendly and Julia-like interface.","category":"page"},{"location":"","page":"RootIO.jl","title":"RootIO.jl","text":"This project is initiated in the context of the 2024 edition of the Google Summer of Code program under the CERN-HSF organization.","category":"page"},{"location":"#Contents","page":"RootIO.jl","title":"Contents","text":"","category":"section"},{"location":"","page":"RootIO.jl","title":"RootIO.jl","text":"Pages = [\"index.md\", \"gettingstarted.md\", \"typesandmethods.md\", \"examples.md\"]\nDepth = 1","category":"page"},{"location":"#Supported-types","page":"RootIO.jl","title":"Supported types","text":"","category":"section"},{"location":"","page":"RootIO.jl","title":"RootIO.jl","text":"Type Description Supported\nString A character string ✅\nInt8 An 8-bit signed integer ✅\nUInt8 An 8-bit unsigned integer ✅\nInt16 A 16-bit signed integer ✅\nUInt16 A 16-bit unsigned integer ✅\nInt32 A 32-bit signed integer ✅\nUInt32 A 32-bit unsigned integer ✅\nFloat32 A 32-bit floating-point number ✅\nHalf32b 32 bits in memory, 16 bits on disk ❌\nFloat64 A 64-bit floating-point number ✅\nDouble32c 64 bits in memory, 32 bits on disk ❌\nInt64 A long signed integer, stored as 64-bit ✅\nUInt64 A long unsigned integer, stored as 64-bit ✅\nBool A boolean ✅\nStdVector{T} A vector of elements of any of the above types ✅\nC-array A C-array of elements of any of the above types ✅\nSimple structs A simple sturcts without any struct field ✅\nNested structs A sturcts with another struct as its field ❌\nRNTuple ROOT's experimental tuple data type ❌","category":"page"},{"location":"#For-contributors","page":"RootIO.jl","title":"For contributors","text":"","category":"section"},{"location":"","page":"RootIO.jl","title":"RootIO.jl","text":"Add support for ROOT classes in ROOT.jl\nAdd support for writing new classes and objects\nTranslate ROOT Tutorials into equivalent Julia tutorials","category":"page"},{"location":"typesandmethods/#Types-and-Methods","page":"Types & Methods","title":"Types & Methods","text":"","category":"section"},{"location":"typesandmethods/","page":"Types & Methods","title":"Types & Methods","text":"Modules = [RootIO]\nOrder   = [:type, :function]","category":"page"},{"location":"typesandmethods/#RootIO.TTree","page":"Types & Methods","title":"RootIO.TTree","text":"struct TTree\n\nA struct representing a ROOT TTree with its associated branches and file.\n\n\n\n\n\n","category":"type"},{"location":"typesandmethods/#RootIO.TTree-Tuple{CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile}, String, String, Any}","page":"Types & Methods","title":"RootIO.TTree","text":"TTree(file::CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile}, name::String, title::String, data)\n\nCreates a new ROOT TTree with branches of given type or branches having types infered from the given data (data is not written to the tree).\n\nArguments\n\nfile: A pointer to a ROOT file where the TTree will be stored.\nname: The name of the TTree.\ntitle: The title of the TTree.\ndata: The data used to define and optionally fill the branches of the TTree. This can be a DataType or an instance of a type with fields.\n\nExample\n\nmutable struct Event\n    x::Float32\n    y::Float32\n    z::Float32\n    v::StdVector{Float32}\nend\nf = ROOT.TFile!Open(\"data.root\", \"RECREATE\")\nEvent()  = Event(0., 0., 0., StdVector{Float32}())\ntree = RootIO.TTree(f, \"mytree\", \"mytreetitle\", Event)\ne = Event()\nfor i in 1:10\n    e.x, e.y, e.z = rand(3)\n    resize!.([e.v], 5)\n    e.v .= rand(Float32, 5)\n    RootIO.Fill(tree, e)\nend\n\n\n\n\n\n","category":"method"},{"location":"typesandmethods/#RootIO.TTree-Tuple{CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile}, String, String}","page":"Types & Methods","title":"RootIO.TTree","text":"TTree(file:CxxWrap.CxxWrapCore.CxxPtr{ROOT.TFile}, name::String, title::String; kwargs...)\n\nCreates a new ROOT TTree and fills it with the provided data.\n\nArguments\n\nfile: A pointer to a ROOT file where the TTree will be stored.\nname: The name of the TTree.\ntitle: The title of the TTree.\nkwargs...: Named arguments representing the branches of the TTree. Each named argument is either a data type or an array of data.\n\nExample\n\nfile = ROOT.TFile!Open(\"example.root\", \"RECREATE\")\nname = \"example_tree\"\ntitle = \"Example TTree\"\ndata = (col_float=rand(Float64, 3), col_int=rand(Int32, 3))\ntree = RootIO.TTree(file, name, title; data...)\n\n\n\n\n\n","category":"method"},{"location":"typesandmethods/#RootIO.Fill-Tuple{RootIO.TTree, Any}","page":"Types & Methods","title":"RootIO.Fill","text":"Fill(tree::TTree, data)\n\nFills a ROOT TTree with the provided data.\n\nArguments\n\ntree: The TTree object to be filled.\ndata: The data to fill the TTree with. This can be a table or a row.\n\nExample\n\n# Assuming `tree` is an existing TTree and `data` is a table or row\nFill(tree, data)\n\n\n\n\n\n","category":"method"},{"location":"typesandmethods/#RootIO.Write-Tuple{RootIO.TTree}","page":"Types & Methods","title":"RootIO.Write","text":"Write(tree::TTree)\n\nWrites a ROOT TTree to the associated ROOT file.\n\nArguments\n\ntree::TTree: The TTree object to be written to the ROOT file.\n\n\n\n\n\n","category":"method"}]
}
